# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID"
interface Node {
    "The ID of the object."
    id: ID!
}

type BankType {
    description: String
    id: ID!
    name: String!
}

type ChangePassword {
    errors: [String]!
    ok: Boolean!
    token: String
}

type CityType implements Node {
    id: ID!
    name: String!
    provinceId: Int
}

type CityTypeConnection {
    "Contains the nodes in this connection."
    edges: [CityTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `CityType` and its cursor."
type CityTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: CityType
}

type CreateImagePayload {
    image: ImageType!
}

type CreateProfilePayload {
    profile: ProfileType!
}

type CreateTransactionPayload {
    transaction: TransactionType!
}

type CreateTransactionRequest {
    errors: [String]!
    ok: Boolean!
    transactionRequest: TransactionRequestType
}

type CreateUser {
    token: String
    user: UserType
}

type GroupType {
    name: String!
    permissions: [PermissionType!]!
    users: [UserType]
}

type ImageKindType {
    description: String
    name: String!
}

type ImageType {
    description: String
    id: ID!
    image: String!
    kind: ImageKindType
}

type Login {
    token: String
    user: UserType
}

type LoginOTP {
    errors: [String]!
    ok: Boolean!
    token: String
    user: UserType
}

type MoarefiShodeHaType {
    firstName: String
    lastName: String
}

type MohasebeSodForAllSummaryType {
    amount: Float
    profile: ProfileType
}

type Mutation {
    changePassword(
        "کلمه عبور قدیمی"
        oldPassword: String!,
        "کلمه عبور جدید"
        password1: String!,
        "تکرار کلمه عبور جدید"
        password2: String!
    ): ChangePassword
    "افزودن تصویر"
    createImage(input: CreateImageInput!): CreateImagePayload
    "نام کاربری و کلمه عبور معرفی شده برای ساخت کاربر جدید و اتصال آن به پروفایل درحال ساخت استفاده میشود"
    createProfile(input: CreateProfileInput!): CreateProfilePayload
    "ایجاد تراکنش"
    createTransaction(input: CreateTransactionInput!): CreateTransactionPayload
    createTransactionRequest(input: CreateTransactionRequestImput!): CreateTransactionRequest
    "ایجاد کاربر"
    createUser(input: UserInput!): CreateUser
    deleteToken(refreshToken: String): Revoke
    login(password: String!, username: String!): Login
    loginOtp(otp: String, password: String!, username: String!): LoginOTP
    "مرحله بعد در گردش کار پروفایل"
    profileWorkflowTransition(
        "description"
        description: String,
        id: Int!,
        "transition"
        transition: String!
    ): ProfileWorkFlowTransition
    refreshToken(token: String): Refresh
    "تایید کابران ثبت نام کرده"
    stuffConfirmProfile(input: ConfirmInput!): StuffConfirmProfile
    "Obtain JSON Web Token mutation"
    tokenAuth(password: String!, username: String!): ObtainJSONWebToken
    "مرحله بعد در گردش کار تراکنش"
    transactionWorkflowTransition(
        "description"
        description: String,
        id: Int!,
        "transition"
        transition: String!
    ): TransactionWorkFlowTransition
    "بنابه دلایلی از اینجا نام کاربری و کلمه عبور را نمیتوان تغییر داد"
    updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
    updateTransaction(input: UpdateTransactionInput!): UpdateTransactionPayload
    verifyToken(token: String): Verify
}

"Obtain JSON Web Token mutation"
type ObtainJSONWebToken {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type PelekanType {
    az: Float
    description: String
    id: ID!
    percent: Int!
    ta: Float
}

type PermissionType {
    codename: String!
    name: String!
}

type PlanType {
    description: String
    endDate: Date
    id: ID!
    monthly: Boolean!
    pelekans: [PelekanType!]!
    startDate: Date
    title: String!
}

type PostType implements Node {
    body: String
    "The ID of the object."
    id: ID!
    isPublic: Boolean!
    owner: UserType!
    title: String!
}

type ProfileType implements Node {
    accountNumber: String
    address: String
    "تمامی گردش کارهای پروفایل"
    allWorkflowTransitions: [TransitionType]
    "گردش کارهای مجاز در این مرحله و توسط کاربر جاری"
    availableUserWorkflowTransitions: [TransitionType]
    "گردش کارهای مجاز در این مرحله"
    availableWorkflowTransitions: [TransitionType]
    bank: BankType
    birthDate: Date
    birthPlace: CityType
    cardNumber: String
    city: CityType
    description: String
    email: String
    fatherName: String
    firstName: String
    homePhone: String
    id: ID!
    idNumber: String
    images: [ImageType]
    lastName: String
    moarefiShodeHa: [MoarefiShodeHaType]
    mobile1: String
    mobile2: String
    "نمایش جزیات محاسبه سود از تاریخ تا تاریخ برای کاربر جاری"
    mohasebeSod(
        "از تاریخ"
        azDate: Date!,
        "تا تاریخ"
        taDate: Date!
    ): [ProfitCalculateType]
    nationalCode: String
    officePhone: String
    postalCode: String
    "معرف"
    presenter: String
    "معرف id"
    presenterId: Int
    provinceId: Int
    seporde: Float
    sheba: String
    "مرحله در گردش کار"
    state: String
    stateHistory: [WorkFlowHistoryType]
    "مجموع سود از تاریخ تا تاریخ برای کاربر جاری"
    sumOfSod(
        "از تاریخ"
        azDate: Date!,
        "تا تاریخ"
        taDate: Date!
    ): Float
    tel: String
    transactions(after: String, before: String, effectiveDate_Gte: Date, effectiveDate_Lte: Date, effectiveDate_Range: [Date], expireDate_Gte: Date, expireDate_Lte: Date, expireDate_Range: [Date], first: Int, id: Float, kind_Id: Float, last: Int, offset: Int, profile_Id: Float, state_In: [String]): TransactionTypeConnection!
    user: UserType
}

type ProfileTypeConnection {
    "Contains the nodes in this connection."
    edges: [ProfileTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `ProfileType` and its cursor."
type ProfileTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: ProfileType
}

type ProfileWorkFlowTransition {
    errors: [String]!
    ok: Boolean!
}

type ProfitCalculateType {
    amount: Int
    calculatedAmount: Int
    dateFrom: Date!
    dateTo: Date
    days: Int
    description: String
    id: ID!
    percent: Int
    profile: ProfileType!
}

type ProvinceType {
    cites(after: String, before: String, first: Int, last: Int, name_Icontains: String, name_Istartswith: String, offset: Int, province_Id: Float): CityTypeConnection!
    id: ID!
    name: String!
}

type Query {
    bank: [BankType]
    cities(after: String, before: String, first: Int, last: Int, name_Icontains: String, name_Istartswith: String, offset: Int, province_Id: Float): CityTypeConnection
    "گروه های دسترسی"
    groups: [GroupType]
    imageKind: [ImageKindType]
    lastLoggedInUsers(count: Int): [UserType]
    me: UserType
    "نمایش سود از تاریخ تا تاریخ برای کاربر"
    mohasebeSod(
        "از تاریخ"
        azDate: Date!,
        "کابر"
        profileId: Int!,
        "تا تاریخ"
        taDate: Date!
    ): [ProfitCalculateType]
    "خروجی اکسل سود از تاریخ تا تاریخ برای  همه کاربران"
    mohasebeSodAllExportExcel(
        "از تاریخ"
        azDate: Date!,
        first: Int,
        offset: Int,
        "تا تاریخ"
        taDate: Date!
    ): String
    "نمایش سود از تاریخ تا تاریخ برای  همه کاربران"
    mohasebeSodForAllSummary(
        "از تاریخ"
        azDate: Date!,
        first: Int,
        offset: Int,
        "تا تاریخ"
        taDate: Date!
    ): [MohasebeSodForAllSummaryType]
    permissions: [PermissionType]
    "طرح های سرمایه گزاری"
    plan: [PlanType]
    posts: [PostType]
    profiles(after: String, before: String, first: Int, id: Float, last: Int, lastName: String, lastName_Icontains: String, lastName_Istartswith: String, mobile1: String, mobile1_Icontains: String, mobile1_Istartswith: String, nationalCode: String, nationalCode_Icontains: String, nationalCode_Istartswith: String, offset: Int, presenter_Id: Float, state_In: [String]): ProfileTypeConnection
    provinces: [ProvinceType]
    transactionKinds: [TransactionKindType]
    transactionRequestKinds: [TransactionRequestKindType]
    transactionRequests(after: String, before: String, first: Int, id: Float, kind_Id: Float, last: Int, offset: Int, transaction_Id: Float): TransactionRequestTypeConnection
    transactions(after: String, before: String, effectiveDate_Gte: Date, effectiveDate_Lte: Date, effectiveDate_Range: [Date], expireDate_Gte: Date, expireDate_Lte: Date, expireDate_Range: [Date], first: Int, id: Float, kind_Id: Float, last: Int, offset: Int, profile_Id: Float, state_In: [String]): TransactionTypeConnection
    users: [UserType]
}

type Refresh {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type Revoke {
    revoked: Int!
}

"تایید کابران ثبت نام کرده"
type StuffConfirmProfile {
    errors: [String]!
    ok: Boolean!
}

type TransactionKindType {
    id: ID!
    title: String!
}

type TransactionRequestKindType {
    description: String!
    id: ID!
    title: String!
}

type TransactionRequestType implements Node {
    "تمامی گردش کارهای تراکنش"
    allWorkflowTransitions: [TransitionType]
    "گردش کارهای مجاز در این مرحله و توسط کاربر جاری"
    availableUserWorkflowTransitions: [TransitionType]
    "گردش کارهای مجاز در این مرحله"
    availableWorkflowTransitions: [TransitionType]
    created: DateTime!
    description: String
    id: ID!
    images: [ImageType]
    kind: TransactionRequestKindType!
    state: TransactionRequestState!
    stateHistory: [WorkFlowHistoryType]
    transaction: TransactionType!
}

type TransactionRequestTypeConnection {
    "Contains the nodes in this connection."
    edges: [TransactionRequestTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `TransactionRequestType` and its cursor."
type TransactionRequestTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: TransactionRequestType
}

type TransactionType implements Node {
    alias: String
    "تمامی گردش کارهای تراکنش"
    allWorkflowTransitions: [TransitionType]
    "مبلغ"
    amount: Float!
    "گردش کارهای مجاز در این مرحله و توسط کاربر جاری"
    availableUserWorkflowTransitions: [TransitionType]
    "گردش کارهای مجاز در این مرحله"
    availableWorkflowTransitions: [TransitionType]
    contractTerm: Int
    dateTime: DateTime!
    description: String
    effectiveDate: Date
    expireDate: Date
    id: ID!
    images: [ImageType]
    kind: TransactionKindType!
    percent: Int!
    plan: PlanType
    profile: ProfileType!
    receiptNumber: String
    state: TransactionState!
    stateHistory: [WorkFlowHistoryType]
}

type TransactionTypeConnection {
    "Contains the nodes in this connection."
    edges: [TransactionTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
    totalCount: Int
    totalSum: Float
}

"A Relay edge containing a `TransactionType` and its cursor."
type TransactionTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: TransactionType
}

type TransactionWorkFlowTransition {
    errors: [String]!
    ok: Boolean!
}

type TransitionType {
    name: String
    permission: String
    source: String
    target: String
}

type UpdateProfilePayload {
    profile: ProfileType!
}

type UpdateTransactionPayload {
    transaction: TransactionType!
}

"اطلاعات کاربر جاری"
type UserType {
    allPermissions: [String]
    firstName: String!
    "The groups this user belongs to. A user will get all permissions granted to each of their groups."
    groups: [GroupType!]!
    id: ID!
    lastLogin: DateTime
    lastName: String!
    profile: ProfileType
    "Specific permissions for this user."
    userPermissions: [PermissionType!]!
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

type Verify {
    payload: GenericScalar!
}

type WorkFlowHistoryType {
    by: UserType
    description: String
    id: ID!
    objectId: Int!
    sourceState: String
    state: String!
    timestamp: DateTime!
    transition: String!
}

"An enumeration."
enum TransactionRequestState {
    "boss_confirmed"
    BOSS_CONFIRMED
    "converted"
    CONVERTED
    "customer_added"
    CUSTOMER_ADDED
    "customer_confirmed"
    CUSTOMER_CONFIRMED
    "start"
    START
    "stuff_added"
    STUFF_ADDED
    "stuff_checked"
    STUFF_CHECKED
    "stuff_confirmed"
    STUFF_CONFIRMED
}

"An enumeration."
enum TransactionState {
    "boss_confirmed"
    BOSS_CONFIRMED
    "converted"
    CONVERTED
    "customer_added"
    CUSTOMER_ADDED
    "customer_confirmed"
    CUSTOMER_CONFIRMED
    "start"
    START
    "stuff_added"
    STUFF_ADDED
    "stuff_checked"
    STUFF_CHECKED
    "stuff_confirmed"
    STUFF_CONFIRMED
}

input ConfirmInput {
    "درصورت تایید true در غیرآن false"
    confirmed: Boolean!
    "توضیحات"
    description: String
    id: Int!
}

input CreateImageInput {
    description: String
    image: Upload!
    kindId: Int
    "نام چیزی مه این تصویر مربوط به آن است مانند profile , transaction"
    model: String
    objectId: Int
}

input CreateProfileInput {
    accountNumber: String
    address: String
    bankId: Int
    birthDate: String
    birthPlaceId: Int
    cardNumber: String
    cityId: Int
    description: String
    email: String
    fatherName: String
    firstName: String
    homePhone: String
    idNumber: String
    images: [CreateImageInput]
    lastName: String
    mobile1: String
    mobile2: String
    nationalCode: String
    officePhone: String
    postalCode: String
    sheba: String
    tel: String
    "کاربر متناظر"
    userId: Int!
}

"ورودی های لازم برای ایجاد تراکنش"
input CreateTransactionInput {
    "نام دیگر"
    alias: String
    "مبلغ"
    amount: Float!
    "مدت قرارداد"
    contractTerm: String
    "توضیحات"
    description: String
    "تاریخ موثر"
    effectiveDate: Date!
    "تاریخ انقضا"
    expireDate: Date
    "پیوست ها"
    images: [CreateImageInput]
    "id نوع تراکنش"
    kindId: Int!
    "کد طرح"
    planId: Int!
    "کاربر تراکنش"
    profileId: Int!
    "شماره پیگیری"
    receiptNumber: String
}

input CreateTransactionRequestImput {
    description: String
    images: [CreateImageInput]
    kindId: Int!
    transactionId: Int!
}

input UpdateImageInput {
    description: String
    id: ID!
    image: Upload
    kindId: Int
    "نام چیزی مه این تصویر مربوط به آن است مانند profile , transaction"
    model: String
    objectId: Int
}

input UpdateProfileInput {
    accountNumber: String
    address: String
    bankId: Int
    birthDate: String
    birthPlaceId: Int
    cardNumber: String
    cityId: Int
    description: String
    email: String
    fatherName: String
    firstName: String
    homePhone: String
    id: ID!
    idNumber: String
    images: [UpdateImageInput]
    lastName: String
    mobile1: String
    mobile2: String
    nationalCode: String
    officePhone: String
    postalCode: String
    sheba: String
    tel: String
    user: UserInput
    "کاربر متناظر"
    userId: Int!
}

"مبلغ را نمیتوان به روز کرد"
input UpdateTransactionInput {
    "توضیحات"
    description: String
    "تاریخ موثر"
    effectiveDate: Date!
    id: ID!
    "id نوع تراکنش"
    kindId: Int!
    "کاربر تراکنش"
    profileId: Int!
}

input UserInput {
    id: ID
    password: String!
    username: String!
}


"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar
